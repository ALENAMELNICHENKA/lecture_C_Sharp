int a1 = 15;
int b1 = 21;
int c1 = 39;
int a2 = 122;
int b2 = 23;
int c2 = 33;
int a3 = 13;
int b3 = 2433;
int c3 = 40;

// Теперь воспользуемся функциями.
//Итак, вначале опишем некоторую функцию, назовём её Max. Так как мы работаем с целыми
//числами, то будем так же возвращать int.  функция будет проделывать такую работу: возьмёт три числа и найдёт из них
//максимальное. Затем мы возьмём следующие три числа и найдём максимальное, повторим это действие несколько раз.

//Итак, возьмём некоторый аргумент 1, опишем некоторый аргумент 2 и 3.
//После этого опишем тело метода
//Сначала у нас была подзадача, где мы искали максимум из трёх чисел. Теперь идёт всё то же самое, только в контексте метода. 
//Определяем внутренний result, где будет храниться значение max. 
//Далее, если arg2>result, то в result надо положить arg2. То же самое проделываем с третьей строчкой кода. 
//Теперь требуется, чтобы наш метод возвращал result.
// Таким образом, у нас появляется вспомогательный механизм, который ищет максимум из трёх чисел. Посмотрим, как можно это использовать

int Max(int arg1, int arg2, int arg3)
{
int result = arg1;
if(arg2>result) result=arg2;
if(arg3>result) result=arg3;
return result;
}

//Но у нас должно быть определено три финалиста. Поэтому создадим переменную max1 и
//скажем, что результатом работы функции Max будет максимальная из трёх чисел: a1, b1 и c1.
//Аналогичным образом проделаем эти действия для второй и третьей тройки игроков:

int max1 = Max(a1, b1, c1);
int max2 = Max(a2, b2, c2);
int max3 = Max(a3, b3, c3);

//а после того как всё будет сделано, устроим окончательный финал. Попросим max принять на вход max1, max2 и max3:

int max = Max(max1, max2, max3);
Console.WriteLine(max);

// Так же можно записать другим способом. Возьмём значение max переменной max и то, что
// посчитали. Но вместо того, чтобы использовать дополнительные переменные, внутри
// аргумента передадим функцию.
// int max = Max(
// Max(a1, b1, c1)
// Max(a2, b2, c2)
// Max(a3, b3, c3));