// Упорядочить массив
//Остановимся на одном из самых простых. Это так называемый алгоритм
// сортировки методом выбора, ещё его называют алгоритм сортировки методом минимакса или
// иногда просто называют методом максимального, или выбора максимального или выбора
// минимального и так далее. Узнаем, в чём особенность (суть) этого алгоритма. Есть какая-то
// последовательность чисел. Наша задача — выбрать самый первый элемент и в оставшейся
// части, с учётом нашей текущей позиции определить минимальный. После того как он найден,
// нужно поменять выделенный (рабочий элемент), на который сейчас указывает стрелочка, это
// 6, с единицей, являющейся для нас минимальной.
//Было: 6 8 3 2 1 4 5 7
//Стало: 1 8 3 2 6 4 5 7
//Поменяли. Дальше у нас следующий шаг, который будет выбирать очередной рабочий элемент
// для нас. Это теперь 8. Мы явно указываем то, что 1 уже отсортированы к ней больше касаться
// 11
// не нужно. Дальше наша задача во всём неотсортированном кусочке выбрать снова
// минимальный. Поменять его местами с рабочим.
// Было: 1 8 3 2 6 4 5 7
// Стало: 1 2 3 8 6 4 5 7  и т.д.

//1. Найти позицию минимального элемента в неотсортированной части массива.
//2. Произвести обмен этого значения со значением первой неотсортированной позиции.
//3. Повторять пока есть неотсортированные элементы.

int[] arr = { 1, 5, 4, 3, 2, 6, 7, 1, 1};//Для начала заведём массив, который будем сортировать.
                                         
 //На следующем этапе решим небольшую подзадачу, отвечающую за вывод данных
//массива на экран. Напишем отдельный метод. Причём сделаем это несколькими способами 
//Первый - это метод void, назовём его PrintArray  
void PrintArray(int[] array)//В качестве аргумента будет приходить массив
{
int count = array.Length;//Получение количества элементов Length.

    for (int i = 0; i < count; i++)//Здесь цикл for, в котором мы пробегаем по всем
                                   //элементам нашего массива.
    {
        Console.Write($"{array[i]} "); 
    }
    Console.WriteLine();
}
//Следующий этап. Нам нужно написать метод, который будет упорядочивать наш массив.
//Назовём его selectionSor (сортировка выбором).
void SelectionSor(int[] array)
{
    for (int i = 0; i < array.Length - 1; i++)
    { 
        int minPosition = i;//На след. этапе мы определяем позицию, на которую смотрим. Назовём её minPosition

        for (int j = i +1; j < array.Length; j++)// циклом внутри цикла ищем самый минимальный элемент. 
                                                //Начальная позиция, от которой мы будем начинать эти
                                                //действия, как вы помните, это кусочек массива, который был отсортирован, мы уже его не
                                                //касаемся, а то, что у нас отсортировано, начинается как раз с позиции i+1. 
                                                //И идём мы допоследнего элемента array.Length.

        {
            if (array[j] < array[minPosition]) minPosition = j;//мы смотрим текущий, если он меньше того элемента, который мы предполагали на
                                                            //минимальной позиции, то нужно сохранить текущую позицию. 
                                                            //minPosition = j

            
        }



        int temporary = array[i];//Временная найденная переменная, кот. надо поменять местами
        array[i] = array[minPosition];// это простой обмен 2-х переменных местами
        array[minPosition] = temporary;

    }
}


PrintArray(arr);
SelectionSor(arr);
PrintArray(arr);



