// Допустим, у нас есть массив array, в котором n элементов. Найдём элемент, совпадающий с
// некоторым значением, который определяет пользователей.
// 1. Сохраним его в переменную find. Затем установим счётчик в нулевую позицию.
// 2. Если на текущей позиции элемент совпал с find, операцию можно завершить, потому
// что мы нашли позицию.
// 3. Если элемент не совпал с find, увеличиваем значение счётчика index на 1 и переходим
// на предыдущий шаг.
// 4. Сравниваем снова. И если элемент совпал с find, значит, алгоритм закончил работу.
// 5. Если элемент совпал с find, снова увеличиваем индекс. Смотрим результат.
// 6. В результате если элемент находится, операция завершается успешно. А если этого
// элемента так и нет, надо сообщить об этом.

//Реализация алгоритма
// Итак, реализуем теперь этот алгоритм кодом. Сначала определим новый массив. Дадим int
// имя array. Далее определим какое-то количество чисел, например, 8. Технически их может
// быть сколько угодно, потому сейчас мы реализовываем задачу для любого количества
// элементов.

int[] array = {1, 12, 31, 4, 15, 16, 17, 18};
//Далее по алгоритму требуется n элементов. Чтобы получить n, напишем:
int n = array.Length;
// array.Length возвращает длину или количество элементов массива
//Далее надо, чтобы пользователь мог ввести число. Выберем, например,число 4:
int find = 18;
//Теперь по нашему алгоритму требуется установить некоторый счётчик index, поэтому определим его так же
int index = 0;
//Далее нам потребуется цикл while, в котором будем проверять: если index < n.
while (index < n)
{
    if(array[index] == find)
    {
        Console.WriteLine(index);
    }
//index = index + 1;
index ++;
}

//Если у нас будет несколько одинаковых элементов, наш алгоритм покажет их все.Это можно справить,добавив оператор 
// break («прервать»):

//if(array[index] == find)
// {
// Console.WriteLine(index);
// break;
// }

